18) Screenshot

---------------------------------------

32)
#!/bin/bash


usrid=(`cut -d ":" -f3 /etc/passwd`)  
if [ $# -gt 0 ]  
then
if [ $# -eq 1 ] 
then
echo "Error : Please pass 2 arguments through CL.
Usage : ./30_user_ids.sh 100 200"
elif [ $1 -gt $2 ]    
then
echo "Error : Invalid range. Please enter the valid range through CL."
else
count=0  
for i in ${usrid[@]}  
	do
if [ $i -ge $1 -a $i -le $2 ]   
	then
  let count=$count+1
	fi
	done
	echo "Total count of user ID between $1 to $2 is : $count"
	fi
     else  
   count=0
  for i in ${usrid[@]}
	do
if [ $i -ge 500 -a $i -le 10000 ]
	then
	let count=$count+1
	fi
	done
	echo "Total count of user ID between 500 to 10000 is: $count"
         fi
         
  --------------------------------------------------------------------------
  
  31)
  
  #!/bin/bash

filesys=(`df | tr -s " " | cut -d " " -f1`)
for j in ${filesys[@]}
do
        echo "$j"
done
useper=(`df | tr -s " " | cut -d " " -f5 | cut -d "%" -f1`)
for i in `seq $((${#useper[@]}-1))`
do
        if [ ${useper[i]} -ge 90 ]
        then
echo "Filesystem ${filesys[i]} have less than 10% free space"
fi
done

---------------------------------------------------
26)

# !/bin/bash
echo "enter directory name"
read dir
if[ -d $dir]
then
echo "list of files in the directory"
ls –l $dir|egrep ‘^d’
else
echo "enter proper directory name"
fi


------------------------------------------

19)

#!/bin/bash
echo "Enter the target directory "
read target_dir
cd $target_dir
 
echo "Enter the file extension to search without a dot"
read old_ext
 
echo "Enter the new file extension to rename to without a dot"
read new_ext
 
echo "$target_dir, $old_ext, $new_ext"
 
for file in *.$old_ext
do
    mv -v "$file" "${file%.$old_ext}.$new_ext"
done;

  ----------------------------------------------
  30)
  
  #!/bin/bash

if [ $# -eq 1 ] #To check whether cla is passed or not
then
	echo "Before locking"
	ls -l $1/   #To display the file permissions and many more before locking the permissions for groups and others.
	chmod -R go-rwx $1/    #To remove all permissions for groups and others for the directory and it's contents.
   echo "After locking"
   ls -l $1/   #displaying the permissions of all the contents present in the given directory after locking it.
else
	echo "Error : Please pass the directory in command line"
fi



#!/bin/bash

if [ $# -eq 1 ] 
then
	echo "Before locking"
	ls -l $1/   
	chmod -R go-rwx $1/    
   echo "After locking"
   ls -l $1/   
else
	echo "Error : Please pass the directory in command line"
fi
  

-------------------------------------------------------------------

apt update
    2  clear
    3  apt upgrade
    4  apt install ansible ansible-core
    5  apt install ansible
    6  ansible --version
    7  clear
    8  history
adduser raju
   19  visudo
   20  vi /etc/ssh/sshd_config
   21  history
apt-get update
    2  clear
    3  adduser raju
    4  visudo
    5  vi /etc/ssh/sshd_config
    6  history
slave machine commands







ssh-keygen
    2  ssh-copy-id raju@
    3  ssh-copy-id raju@10.0.0.5
    4  clear
    5  vi /etc/ansible/hosts
    6  sudo vi /etc/ansible/hosts
    7  ansible all -m ping
    8  vi webapp.yml
    9  vi app.py
   10  ansible-playbook webapp.yml --syntax-check
   11  ansible-playbook webapp.yml -check
   12  ansible-playbook webapp.yml
   13  sudo ansible-playbook webapp.yml
   14  ansible-playbook webapp.yaml --user=raju --extra-vars "ansible_sudo_pass=Raju@2501"
   15  ansible-playbook webapp.yml --user=raju --extra-vars "ansible_sudo_pass=Raju@2501"
   16  history

----------------------------------------------------------------

