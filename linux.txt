1)

#!/bin/bash
# A shell script to print each number five times.
for (( i = 1; i <= 5; i++ ))      ### Outer for loop ###
do

    for (( j = 1 ; j <= i; j++ )) ### Inner for loop ###
    do
          echo -n "$i "
    done

  echo "" #### print the new line ###
done
--------------------------------
2)

#!/bin/sh
c=6;
m=1;
for((i=1;i<=5;i++))
do
for((k=1;k<=c;k++))
do
  echo -n  " "
done
for((j=1;j<=i;j++))
do
echo -n "$j"
echo -n " "
done
c=$(($c-1))
echo -e " "
done


exit 0

#!/bin/sh
 number=1
rows=5
for((i=1; i<=rows; i++))
do
  for((j=1; j<=i; j++))
  do
    echo -n "$number "
    number=$((number + 1))
  done
  number=1
  echo
done

------------------------------------
3)

#!/bin/sh
echo "give a number"
read a
for((i=1; i<=$a; i++))
do
  for((j=1; j<=i; j++))
  do
echo -n "$i "
    i=$((i + 1))
  done
  
  
  
  #!/bin/sh
 number=1
rows=4
for((i=1; i<=rows; i++))
do
  for((j=1; j<=i; j++))
  do
    echo -n "$number "
    number=$((number + 1))
  done
  echo
done

------------------------------------------------
4)

















-------------------------------------------

5)

#! /bin/bash
echo "give me two numbers"
read a b
echo $a+$b | bc
------------------------------------
6)
"give me two numbers and operators"
read a b c
echo $a $c $b | bc




--------------------------------
7)

"give me two numbers"
read a b
if [ $a -gt $b ];
then
echo "a is greater than b"
else
echo "b is greater than a"
fi
----------------------------
8)

#!/bin/bash
echo "give me a number"
read a
sd=0
rev=0
while [ $a -gt 0 ]
do
sd=$(( $a % 10 ))
rev=$(( $rev * 10 + $sd ))
a=$(( $a / 10))
done
echo "reverse number of entered digit is" $rev
------------------------------------
9)

#!/bin/bash
echo "give me the file name and extension"
read $a
sed '/^$/d' sample
--------------------
10)

#!/bin/bash
echo "give me a number or string"
read a
i=$((${#a}-1))
echo ${a:$i:1}
~
-----------------------------

13)
#!/bin/bash
echo "Chess Board"

for (( i=1; i<=8; i++))
do
        for (( j=1; j<=8; j++))
        do
                total=$(($i+$j))
                temp=$(($total%2))
                # for alternative blocks
                if [ $temp -eq 0 ]
                then
                        echo -e -n "\033[47m" " "  #white
                else
                        echo -e -n "\033[40m" " " #black
                fi
        done
        echo -e -n "\033[0m" " "
        echo ' '
done
-----------------------
12)
#!/bin/bash
echo " give me a number or string"
read a b c d e
n=${#a}
echo "string length is " $n
m=${#b}
echo "string length is " $m
o=${#c}
echo "string length is " $o
p=${#d}
echo "string length is " $p
q=${#e}
echo "string length is " $q

------------------------------------
-----------------------------------------------
14)

#!/bin/bash
echo "give 5 number and orderd or underderd array"
read a b c d e f g

arr=($a $b $c $d $e)

echo "Array in original order"
echo ${arr[*]}

for ((i = 0; i<5; i++))
do

    for((j = 0; j<5-i-1; j++))
    do

        if [ ${arr[j]} -gt ${arr[$((j+1))]} ]
        then
            # swap
            temp=${arr[j]}
            arr[$j]=${arr[$((j+1))]}
            arr[$((j+1))]=$temp
        fi
    done
done

echo "Array in sorted order :"
echo ${arr[*]}

echo "Array in sorted order :"
echo ${arr[*]} | rev
-----------------------------------------------
24)

First need to create directory mkdir {dir.name}
Next Create 5 swap file command = touch .{1..5}.swp
Next ls -la check swap files 
goto that directory cd{dir.name}
create file assignment24.sh and paste script and excute it.
This for 24th


if [ $# -eq 1 ]  
then
	if [ -d $1 ]  
	then
		swps=(`find $1 -name "*.swp" -type f`)  
		if [ ${#swps[@]} -ne 0 ]  
		then
			find $1 -name "*.swp" -type f -delete   
		else
			echo "No swp files found in test_swp."
		fi
	else
		echo "Error : '$1' no such a file or directory"
	fi
else
	swps=(`find ~ -name "*.swp" -type f`)  
	if [ ${#swps[@]} -ne 0 ]  
	then
		echo "swap file found :"
		find ~ -name "*.swp" -type f  
	fi
fi


----------------------------------------------

15)
Manjunath sent

nouser=`who | wc -l`
echo -e "User name: $USER (Login name: $LOGNAME)" >> /tmp/info.tmp.01.$$$
echo -e "Current Shell: $SHELL"  >> /tmp/info.tmp.01.$$$
echo -e "Home Directory: $HOME" >> /tmp/info.tmp.01.$$$
echo -e "Your O/s Type: $OSTYPE" >> /tmp/info.tmp.01.$$$
echo -e "PATH: $PATH" >> /tmp/info.tmp.01.$$$
echo -e "Current directory: `pwd`" >> /tmp/info.tmp.01.$$$
echo -e "Currently Logged: $nouser user(s)" >> /tmp/info.tmp.01.$$$
if [ -f /etc/redhat-release ]
then
    echo -e "OS: `cat /etc/redhat-release`" >> /tmp/info.tmp.01.$$$
fi

if [ -f /etc/shells ]
then
    echo -e "Available Shells: " >> /tmp/info.tmp.01.$$$
    echo -e "`cat /etc/shells`"  >> /tmp/info.tmp.01.$$$
fi




if [ -f /etc/sysconfig/mouse ]
then
    echo -e "--------------------------------------------------------------------" >> /tmp/info.tmp.01.$$$ 
    echo -e "Computer Mouse Information: " >> /tmp/info.tmp.01.$$$
    echo -e "--------------------------------------------------------------------" >> /tmp/info.tmp.01.$$$ 
    echo -e "`cat /etc/sysconfig/mouse`" >> /tmp/info.tmp.01.$$$ 
fi
echo -e "--------------------------------------------------------------------" >> /tmp/info.tmp.01.$$$ 
echo -e "Computer CPU Information:" >> /tmp/info.tmp.01.$$$ 
echo -e "--------------------------------------------------------------------" >> /tmp/info.tmp.01.$$$ 
cat /proc/cpuinfo >> /tmp/info.tmp.01.$$$

echo -e "--------------------------------------------------------------------" >> /tmp/info.tmp.01.$$$ 
echo -e "Computer Memory Information:" >> /tmp/info.tmp.01.$$$ 
echo -e "--------------------------------------------------------------------" >> /tmp/info.tmp.01.$$$ 
cat /proc/meminfo >> /tmp/info.tmp.01.$$$
if [ -d /proc/ide/hda ]
then
    echo -e "--------------------------------------------------------------------" >> /tmp/info.tmp.01.$$$ 
    echo -e "Hard disk information:" >> /tmp/info.tmp.01.$$$ 
    echo -e "--------------------------------------------------------------------" >> /tmp/info.tmp.01.$$$ 
    echo -e "Model: `cat /proc/ide/hda/model` " >> /tmp/info.tmp.01.$$$    
    echo -e "Driver: `cat /proc/ide/hda/driver` " >> /tmp/info.tmp.01.$$$    
    echo -e "Cache size: `cat /proc/ide/hda/cache` " >> /tmp/info.tmp.01.$$$    
fi
echo -e "--------------------------------------------------------------------" >> /tmp/info.tmp.01.$$$ 
echo -e "File System (Mount):" >> /tmp/info.tmp.01.$$$ 
echo -e "--------------------------------------------------------------------" >> /tmp/info.tmp.01.$$$ 
cat /proc/mounts >> /tmp/info.tmp.01.$$$

if which dialog > /dev/null
then
    dialog  --backtitle "Linux Software Diagnostics (LSD) Shell Script Ver.1.0" --title "Press Up/Down Keys to move" --textbox  /tmp/info.tmp.01.$$$ 21 70
else
    cat /tmp/info.tmp.01.$$$ |more
fi


---------------------------------------------
19)
for i in {1..10}  
do  
touch $i.txt;  
done;  


for i in *.txt  
do  
echo $i;  
done;  

for i in *.txt  
do  
newfile=${i/.txt/.zip};  
echo $newfile;  
done;  

for i in *.txt  
do  
newfile=${i/.txt/.zip};  
mv $i $newfile;  
done:  
ls -lta

-----------------------------------

33)

#!/bin/bash

arr=(`printenv PATH | tr ":" " "`)  
total=0  
for i in ${arr[@]}   
do
	if [ -d $i ]  
	then
		cd $i   
		count=0  
		for j in `ls`  
		do
			if [ -f $j -a -x $j ]  #
			then
				let count=$count+1   
			fi
		done
		echo -e "Current dir: $i\nCurrent count: $count"  
		let total=$total+$count   
	fi
done
echo "Total - $total"

------------------------------------
34)

awk -F: '{print $1}' /etc/passwd


-----------------------------

22)

#!/bin/sh
# shebang to specify that this is an shell script

# Function to get File
getFile(){
    # Reading txtFileName to convert it's content
    echo -n "Enter File Name:"
    read txtFileName
    # Checking if file exist
    if [ ! -f $txtFileName ]; then
        echo "File Name $txtFileName does not exists."
        exit 1
    fi
}

clear
  echo "1. Uppercase to Lowercase "
  echo "2. Lowercase to Uppercase"
  echo "3. Exit"
  echo -n "Enter your Choice(1-3):"
  read Ch

  case "$Ch" in
    1) 
      # Function Call to get File 
      getFile    
      # Converting to lower case if user chose 1     
      echo "Converting Upper-case to Lower-Case "
      tr '[A-Z]' '[a-z]' <$txtFileName
    ;;

    2)
      # Function Call to get File 
      getFile
      # Converting to upper case if user chose 2
      echo "Converting Lower-Case to Upper-Case "
      tr '[a-z]' '[A-Z]' <$txtFileName
    ;;
    

    *) # exiting for all other cases
        echo "Exiting..."
        exit
    ;;
  esac
  
  ---------------------------------------------------------

11)

#! bin/bash 
echo "The Fibonacci series is : " 
read N a b 
for (( i=0; i<N; i++ )) 
do echo -n "$a " fn=$((a + b)) a=$b b=$fn 
done exit 0

#!/bin/bash echo "Enter the value of n:10" 
read Num f1=0 f2=1
echo "The Fibonacci Nos <= $Num is : " i=0 
while [ $f1 -le $Num ] 
do 
echo -n "$f1 " fn=$((f1+f2)) f1=$f2 f2=$fn 
done 
echo


16th also same script
--------------------------------------------

  21)
  
  #!/bin/bash

hour=`date +%c | tr -s " " | cut -d " " -f4 | cut -d ":" -f1`   
day=`date +%A`  
mon=`date +%B`  
dte=`date +%d`  
year=`date +%Y`  
tf=`date +%r`    
if [ $hour -ge 5 -a $hour -lt 12 ]  
then
        echo -e "Good morning `whoami`, Have nice day!\nThis is $day $dte in $mon of $year ($tf)"
elif [ $hour -ge 12 -a $hour -le 13 ]   
then
        echo -e "Good noon `whoami`, Have nice day!\nThis is $day $dte in $mon of $year ($tf)"
elif [ $hour -ge 14 -a $hour -lt 17 ]  
then
        echo -e "Good afternoon `whoami`, Have nice day!\nThis is $day $dte in $mon of $year ($tf)"
elif [ $hour -ge 17 -a $hour -lt 21 ]   
then
        echo -e "Good evening `whoami`, Have nice day!\nThis is $day $dte in $mon of $year ($tf)"
elif [ $hour -ge 21 -o $hour -lt 5 ]   
then
        echo -e "Good night `whoami`, Have nice day!\nThis is $day $dte in $mon of $year ($tf)"
fi

-----------------------------------------------------
  
32)  

  
  #!/bin/bash


usrid=(`cut -d ":" -f3 /etc/passwd`)  
if [ $# -gt 0 ]  
then
if [ $# -eq 1 ] 
then
echo "Error : Please pass 2 arguments through CL.
Usage : ./30_user_ids.sh 100 200"
elif [ $1 -gt $2 ]    
then
echo "Error : Invalid range. Please enter the valid range through CL."
else
count=0  
for i in ${usrid[@]}  
	do
if [ $i -ge $1 -a $i -le $2 ]   
	then
  let count=$count+1
	fi
	done
	echo "Total count of user ID between $1 to $2 is : $count"
	fi
     else  
   count=0
  for i in ${usrid[@]}
	do
if [ $i -ge 500 -a $i -le 10000 ]
	then
	let count=$count+1
	fi
	done
	echo "Total count of user ID between 500 to 10000 is: $count"
         fi
	 
---------------------------------------------

17)

#!/bin/bash
#print usage 
if [ -z $1 ];then
        echo "Usage :$(basename $0) parent-directory"
        exit 1
fi

#process all subdirectories and files in parent directory
all="$(find $1 -depth)"



for name in ${all}; do
        #set new name in lower case for files and directories
        new_name="$(dirname "${name}")/$(basename "${name}" | tr '[A-Z]' '[a-z]')"

        #check if new name already exists
        if [ "${name}" != "${new_name}" ]; then
                [ ! -e "${new_name}" ] && mv -T "${name}" "${new_name}"; echo "${name} was renamed to ${new_name}" || echo "${name} wasn't renamed!"
        fi
done

echo
echo
#list directories and file new names in lowercase
echo "Directories and files with new names in lowercase letters"
find $(echo $1 | tr 'A-Z' 'a-z') -depth

exit 0




Orrrr




for f in `find`; do mv -v "$f" "`echo $f | tr '[A-Z]' '[a-z]'`"; done



-------------------------------------------------------------------


18)


	 
 
